"""
This module contains functions to fetch handle
"""
from abc import ABC, abstractmethod
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, Updater, CallbackQueryHandler, ContextTypes
from users import users
from my_api import get_food_info, get_random_10_foods
from utils import translate_text, calculate_calories, calculate_water
from logging_config import logger
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
import os
matplotlib.use('Agg')


calorie_burn_rate = {
    '–±–µ–≥': 10,  # Calories per minute
    '–≤–µ–ª–æ—Å–∏–ø–µ–¥': 8,
    '–ø–ª–∞–≤–∞–Ω–∏–µ': 12
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    text = update.message.text
    step = context.user_data.get('step')
    update_flag = context.user_data.get('update')

    if step == 'log_workout':
        try:
            if 'workout_type' not in context.user_data:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é /log_workout.")
                return

            workout_type = context.user_data['workout_type']
            user_data = users.get(user_id)
            try:
                workout_time = int(update.message.text)  # Time in minutes
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö).")
                return

            if workout_type in calorie_burn_rate:
                calories_burned = calorie_burn_rate[workout_type] * workout_time

                # Calculate additional water intake: 200 ml for every 30 minutes
                water_needed = (workout_time // 30) * 200
                if water_needed > 0:
                    water_goal = water_needed + user_data.get('water_goal')
                    users.update(user_id, water_goal=water_goal, db_update=1)
                if calories_burned > 0:
                    calories_burned = calories_burned + user_data.get('burned_calories')
                    users.update(user_id, burned_calories=calories_burned, db_update=1)

                    response = f"üèÉ‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {workout_time} –º–∏–Ω—É—Ç ‚Äî {calories_burned} –∫–∫–∞–ª. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã."
                    logger.info(f"user {user_id}"+response)
                await update.message.reply_text(response, reply_markup=ReplyKeyboardRemove())

                # Reset the workout type for the user
                del context.user_data['workout_type']
                context.user_data['step'] = None
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö).", reply_markup=ReplyKeyboardRemove())
    elif step == 'log_food':
        try:
            logged_calories = int(text)
            user_data = users.get(user_id)
            logged_calories = logged_calories * context.user_data.get('calories') / 100
            logged_calories = round(logged_calories + user_data.get('logged_calories'),0)
            users.update(user_id, logged_calories=logged_calories, db_update=1)
            remaining_food = user_data.get('calorie_goal') - user_data.get('logged_calories')

            #–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            random_10_foods = get_random_10_foods()
            recomend_food = f"\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n"
            # Display the list of random low-calorie foods with translation
            for food in random_10_foods:
                food_name = f"{food['name']} - {food['calories']} calories"
                translated_food = translate_text(food_name, src_language="en", dest_language="ru")
                recomend_food = recomend_food +"¬ß "+ translated_food + '\n'
            logger.info(f"user {user_id} " + f"–ó–∞–ø–∏—Å–∞–Ω–æ {logged_calories} –º–ª –∫–∫–∞–ª. –û—Å—Ç–∞–ª–æ—Å—å: {max(remaining_food, 0)} –∫–∫–∞–ª\n" + recomend_food)
            await update.message.reply_text(
                f"–ó–∞–ø–∏—Å–∞–Ω–æ {logged_calories} –º–ª –∫–∫–∞–ª. –û—Å—Ç–∞–ª–æ—Å—å: {max(remaining_food, 0)} –∫–∫–∞–ª\n" + recomend_food, reply_markup=ReplyKeyboardRemove()
            )
            del context.user_data['calories']
            context.user_data['step'] = None
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–¥—ã –≤ –º–ª.", reply_markup=ReplyKeyboardRemove())
    elif step == 'log_water':
        try:
            logged_water = int(text)
            user_data = users.get(user_id)
            logged_water = logged_water + user_data.get('logged_water')
            users.update(user_id, logged_water=logged_water, db_update=1)
            remaining_water = user_data.get('water_goal') - user_data.get('logged_water')
            logger.info(
                f"user {user_id} " + f"–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(remaining_water, 0)} –º–ª –¥–æ —Ü–µ–ª–∏." + recomend_food)
            await update.message.reply_text(
                f"–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(remaining_water, 0)} –º–ª –¥–æ —Ü–µ–ª–∏.", reply_markup=ReplyKeyboardRemove()
            )
            context.user_data['step'] = None
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–¥—ã –≤ –º–ª.", reply_markup=ReplyKeyboardRemove())
    elif step == 'weight':
        try:
            users.update(user_id, weight=float(update.message.text))
            if update_flag:
                await set_profile(update, context)
                context.user_data['step'] = None
            else:
                context.user_data['step'] = 'height'
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):", reply_markup=ReplyKeyboardRemove())
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞.", reply_markup=ReplyKeyboardRemove())
    elif step == 'height':
        try:
            users.update(user_id, height=float(update.message.text))
            if update_flag:
                await set_profile(update, context)
                context.user_data['step'] = None
            else:
                context.user_data['step'] = 'age'
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞.", reply_markup=ReplyKeyboardRemove())
    elif step == 'age':
        try:
            users.update(user_id, age=float(update.message.text))
            if update_flag:
                await set_profile(update, context)
                context.user_data['step'] = None
            else:
                context.user_data['step'] = 'gender'
                buttons = [
                    [KeyboardButton("male"), KeyboardButton("female")]
                ]
                reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
                await update.message.reply_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª",
                    reply_markup=reply_markup)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.", reply_markup=ReplyKeyboardRemove())
    elif step == 'gender':
        gender = update.message.text
        try:
            if gender not in ('male', 'female'):
                context.user_data['step'] = 'gender'
                buttons = [
                    [KeyboardButton("male"), KeyboardButton("female")]
                ]
                reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
                await update.message.reply_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª",
                    reply_markup=reply_markup)
            else:
                users.update(user_id, gender=gender)
                if update_flag:
                    await set_profile(update, context)
                    context.user_data['step'] = None
                else:
                    context.user_data['step'] = 'activity'
                    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?", reply_markup=ReplyKeyboardRemove())
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞.", reply_markup=ReplyKeyboardRemove())
    elif step == 'activity':
        try:
            users.update(user_id, activity=float(update.message.text))
            if update_flag:
                await set_profile(update, context)
                context.user_data['step'] = None
            else:
                context.user_data['step'] = 'city'
                await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", reply_markup=ReplyKeyboardRemove())
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", reply_markup=ReplyKeyboardRemove())

    elif step == 'city':
        users.update(user_id, city=update.message.text)
        user_data = users.get(user_id)
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ OpenWeatherMap

        water_goal = await calculate_water(user_data)
        calorie_goal = await calculate_calories(user_data)

        users.update(user_id, water_goal=water_goal, calorie_goal=calorie_goal, db_update=1)
        logger.info(
            f"user {user_id} " + f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! üéâ\n"
            f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user_data.get('water_goal')} –º–ª.\n"
            f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_data.get('calorie_goal')} –∫–∫–∞–ª.")
        await update.message.reply_text(
            f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! üéâ\n"
            f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user_data.get('water_goal')} –º–ª.\n"
            f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_data.get('calorie_goal')} –∫–∫–∞–ª."
        )

        context.user_data['step'] = None
        if update_flag:
            await set_profile(update, context)
    elif update_flag:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if text == "–í–µ—Å":
            context.user_data['step'] = 'weight'
            await update.message.reply_text(
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å: {user_data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥.\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–≤ –∫–≥):",
                reply_markup=ReplyKeyboardRemove(),
            )
        elif text == "–†–æ—Å—Ç":
            context.user_data['step'] = 'height'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç (–≤ —Å–º):", reply_markup=ReplyKeyboardRemove())
        elif text == "–í–æ–∑—Ä–∞—Å—Ç":
            context.user_data['step'] = 'age'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=ReplyKeyboardRemove())
        elif text == "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
            context.user_data['step'] = 'activity'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å:",
                                            reply_markup=ReplyKeyboardRemove())
        elif text == "–ì–æ—Ä–æ–¥":
            context.user_data['step'] = 'city'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=ReplyKeyboardRemove())
        elif text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            context.user_data['step'] = None
            context.user_data['update'] = False
            user_data = users.get(user_id)
            water_goal = await calculate_water(user_data)
            calorie_goal = await calculate_calories(user_data)

            users.update(user_id, water_goal=water_goal, calorie_goal=calorie_goal, db_update=1)
            logger.info(
                f"user {user_id} " + f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üéâ\n"
                f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user_data.get('water_goal')} –º–ª.\n"
                f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_data.get('calorie_goal')} –∫–∫–∞–ª.")
            await update.message.reply_text(
                f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üéâ\n"
                f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user_data.get('water_goal')} –º–ª.\n"
                f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_data.get('calorie_goal')} –∫–∫–∞–ª.",
                reply_markup = ReplyKeyboardRemove()
            )
        elif text == "–û—Ç–º–µ–Ω–∞":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            context.user_data['step'] = None
            logger.info(
                f"user {user_id} " + f"–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
            await update.message.reply_text("–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",reply_markup=ReplyKeyboardRemove())
            context.user_data['update'] = False

# –ö–æ–º–∞–Ω–¥–∞ /set_profile
async def set_profile(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user_data = users.get(user_id)
    if not user_data or user_data.get('water_goal') == 0:
        user_data = users.initialize_user_data()
        user_data['last_active'] = datetime.datetime.now()
        users.add(user_id, user_data)
        context.user_data['step'] = 'weight'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):", reply_markup=ReplyKeyboardRemove())
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        buttons = [
            [KeyboardButton("–í–µ—Å"), KeyboardButton("–†–æ—Å—Ç")],
            [KeyboardButton("–í–æ–∑—Ä–∞—Å—Ç"), KeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
            [KeyboardButton("–ì–æ—Ä–æ–¥")],
            [KeyboardButton("–û—Ç–º–µ–Ω–∞"), KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")],
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        logger.info(
            f"user {user_id} " + f"set_profile")
        await update.message.reply_text(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–í–µ—Å: {user_data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
            f"–†–æ—Å—Ç: {user_data.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('activity', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} –º–∏–Ω—É—Ç/–¥–µ–Ω—å\n"
            f"–ì–æ—Ä–æ–¥: {user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:",
            reply_markup=reply_markup,
        )
        context.user_data['update'] = True

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    logger.info(
        f"user {user_id} " + f"start")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å—á–µ—Ç—É –Ω–æ—Ä–º—ã –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ —Ç—Ä–µ–∫–∏–Ω–≥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=ReplyKeyboardRemove()
    )

# Function to handle the callback from the confirmation buttons
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id

    # Handle the 'yes' response
    if query.data == 'restart_yes':
        user_data = users.get(user_id)
        if user_data:
            try:
                # Reset the user data (burned calories, logged calories, logged water)
                users.update(user_id, burned_calories=0, logged_calories=0, logged_water=0, db_update=1)
                logger.info(
                    f"user {user_id} " + f"–î–µ–Ω—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–±–Ω—É–ª–µ–Ω—ã. –£–¥–∞—á–∏!")
                await query.edit_message_text("–î–µ–Ω—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–±–Ω—É–ª–µ–Ω—ã. –£–¥–∞—á–∏!")
            except (IndexError, ValueError):
                await query.edit_message_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –¥–Ω—è.")
        else:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    # Handle the 'no' response
    elif query.data == 'restart_no':
        logger.info(
            f"user {user_id} " + f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–Ω—è –æ—Ç–º–µ–Ω–µ–Ω.")
        await query.edit_message_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–Ω—è –æ—Ç–º–µ–Ω–µ–Ω.")

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–Ω—è
async def restart_day(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user_data = users.get(user_id)

    if not user_data or user_data.get('water_goal') == 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    keyboard = [
        [
            InlineKeyboardButton("–î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–Ω—å", callback_data='restart_yes'),
            InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data='restart_no')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    context.user_data['step'] = "restart_day"
    await update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–Ω—å? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã.",
                                    reply_markup=reply_markup)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã
async def log_water(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user_data = users.get(user_id)
    if not user_data or user_data.get('water_goal') == 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.", reply_markup=ReplyKeyboardRemove())
        return
    try:
        logged_water = int(context.args[0])
        logged_water = logged_water + user_data.get('logged_water')
        users.update(user_id, logged_water=logged_water, db_update=1)
        remaining_water = user_data.get('water_goal') - user_data.get('logged_water')
        logger.info(
            f"user {user_id} " + f"–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(remaining_water, 0)} –º–ª –¥–æ —Ü–µ–ª–∏.")
        await update.message.reply_text(
            f"–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(remaining_water, 0)} –º–ª –¥–æ —Ü–µ–ª–∏.", reply_markup=ReplyKeyboardRemove()
        )
    except (IndexError, ValueError):
        context.user_data['step'] = 'log_water'
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.", reply_markup=ReplyKeyboardRemove())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã
async def log_food(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user_data = users.get(user_id)
    if not user_data or user_data.get('calorie_goal') == 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.", reply_markup=ReplyKeyboardRemove())
        return

    try:
        if context.args:
            meal = ' '.join(context.args)
            response = get_food_info(translate_text(meal))
            if 'calories' in response:
                if response['calories'] > 0:
                    context.user_data['step'] = 'log_food'
                    context.user_data['calories'] = response['calories']
                    logger.info(
                        f"user {user_id} " + f"üçé {translate_text(response['name'].capitalize(), src_language="en", 
                                                                 dest_language="ru")} —Å–æ–¥–µ—Ä–∂–∏—Ç "
                                             f"{response['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º(–º–ª) –≤—ã —Å—ä–µ–ª–∏?")
                    await update.message.reply_text(
                        f"üçé {translate_text(response['name'].capitalize(), src_language="en", 
                                            dest_language="ru")} —Å–æ–¥–µ—Ä–∂–∏—Ç {response['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥. "
                        f"–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º(–º–ª) –≤—ã —Å—ä–µ–ª–∏?", reply_markup=ReplyKeyboardRemove()
                   )
                else:
                    await update.message.reply_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω. 0 –∫–∫–∞–ª")
            else:
                await update.message.reply_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        else:
            await update.message.reply_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–∞–¥–∞–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async def log_workout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Create an inline keyboard with workout type options
    keyboard = [
        [
            InlineKeyboardButton("–ë–µ–≥", callback_data='–±–µ–≥'),
            InlineKeyboardButton("–í–µ–ª–æ—Å–∏–ø–µ–¥", callback_data='–≤–µ–ª–æ—Å–∏–ø–µ–¥'),
            InlineKeyboardButton("–ü–ª–∞–≤–∞–Ω–∏–µ", callback_data='–ø–ª–∞–≤–∞–Ω–∏–µ'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Ask the user to select a workout type
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=reply_markup)

# Function to handle the callback when a workout type is selected
async def workout_type_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    workout_type = query.data  # The selected workout type (e.g., '–±–µ–≥', '–≤–µ–ª–æ—Å–∏–ø–µ–¥', etc.)

    # Ask the user to provide the time (in minutes)
    await query.answer()  # Acknowledge the button press
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {workout_type.capitalize()}. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:")

    # Store the selected workout type in context.user_data for later use
    context.user_data['step'] = "log_workout"
    context.user_data['workout_type'] = workout_type

# –ü—Ä–æ–≥—Ä–µ—Å—Å
async def check_progress(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user_data = users.get(user_id)
    if not user_data or user_data.get('calorie_goal') == 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    water = user_data.get('logged_water')
    water_goal = user_data.get('water_goal')
    calories = user_data.get('logged_calories')
    calorie_goal = user_data.get('calorie_goal')
    burned = user_data.get('burned_calories')
    logger.info(
        f"user {user_id} " + f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n"
        f"¬ß –í—ã–ø–∏—Ç–æ: {water} –º–ª –∏–∑ {water_goal} –º–ª.\n"
        f"¬ß –û—Å—Ç–∞–ª–æ—Å—å: {max(water_goal - water, 0)} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"¬ß –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"¬ß –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {burned} –∫–∫–∞–ª.\n"
        f"¬ß –ë–∞–ª–∞–Ω—Å: {max(calorie_goal - calories + burned, 0)} –∫–∫–∞–ª.\n")
    await update.message.reply_text(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n"
        f"¬ß –í—ã–ø–∏—Ç–æ: {water} –º–ª –∏–∑ {water_goal} –º–ª.\n"
        f"¬ß –û—Å—Ç–∞–ª–æ—Å—å: {max(water_goal - water, 0)} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"¬ß –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"¬ß –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {burned} –∫–∫–∞–ª.\n"
        f"¬ß –ë–∞–ª–∞–Ω—Å: {max(calorie_goal - calories + burned, 0)} –∫–∫–∞–ª.\n"
    )

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
def plot_progress(user_id, dates, water, calories, water_goal, calorie_goal, burned_calories, time_period):
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ü–µ–ª–µ–π –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç time_period –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
    """
    # Convert dates to pandas datetime format for easier manipulation
    dates = pd.to_datetime(dates)

    # Aggregate data based on the time period
    if time_period == "day":
        # Data already in daily format, so no change needed
        aggregated_dates = dates
        aggregated_water = water
        aggregated_calories = calories
        aggregated_burned_calories = burned_calories
        aggregated_water_goal = water_goal
        aggregated_calorie_goal = calorie_goal
    elif time_period == "week":
        # Group by week and sum the values
        week_start_dates = dates - pd.to_timedelta(dates.dt.weekday, unit='D')
        aggregated_data = pd.DataFrame({
            'dates': week_start_dates,
            'water': water,
            'calories': calories,
            'burned_calories': burned_calories,
            'water_goal': water_goal,
            'calorie_goal': calorie_goal
        }).groupby('dates').sum()
        aggregated_dates = aggregated_data.index
        aggregated_water = aggregated_data['water']
        aggregated_calories = aggregated_data['calories']
        aggregated_burned_calories = aggregated_data['burned_calories']
        aggregated_water_goal = aggregated_data['water_goal']
        aggregated_calorie_goal = aggregated_data['calorie_goal']
    elif time_period == "month":
        # Group by month and sum the values
        month_start_dates = dates.dt.to_period('M').dt.start_time
        aggregated_data = pd.DataFrame({
            'dates': month_start_dates,
            'water': water,
            'calories': calories,
            'burned_calories': burned_calories,
            'water_goal': water_goal,
            'calorie_goal': calorie_goal
        }).groupby('dates').sum()
        aggregated_dates = aggregated_data.index
        aggregated_water = aggregated_data['water']
        aggregated_calories = aggregated_data['calories']
        aggregated_burned_calories = aggregated_data['burned_calories']
        aggregated_water_goal = aggregated_data['water_goal']
        aggregated_calorie_goal = aggregated_data['calorie_goal']
    elif time_period == "year":
        # Group by year and sum the values
        year_start_dates = dates.dt.to_period('A').dt.start_time
        aggregated_data = pd.DataFrame({
            'dates': year_start_dates,
            'water': water,
            'calories': calories,
            'burned_calories': burned_calories,
            'water_goal': water_goal,
            'calorie_goal': calorie_goal
        }).groupby('dates').sum()
        aggregated_dates = aggregated_data.index
        aggregated_water = aggregated_data['water']
        aggregated_calories = aggregated_data['calories']
        aggregated_burned_calories = aggregated_data['burned_calories']
        aggregated_water_goal = aggregated_data['water_goal']
        aggregated_calorie_goal = aggregated_data['calorie_goal']

    # Plotting the data
    plt.figure(figsize=(10, 6))

    # –ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã
    plt.plot(aggregated_dates, aggregated_water, label="–í–æ–¥–∞ (–º–ª)", marker="o", color="blue")

    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–µ–≤–æ–π –≤–æ–¥—ã –ø–æ –¥–Ω—è–º
    plt.plot(aggregated_dates, aggregated_water_goal, label="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–æ–¥–∞ (–º–ª)", linestyle="--", color="blue")

    # –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π
    plt.plot(aggregated_dates, aggregated_calories, label="–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)", marker="o", color="green")

    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π –ø–æ –¥–Ω—è–º
    plt.plot(aggregated_dates, aggregated_calorie_goal, label="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)", linestyle="--", color="green")

    # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π
    plt.plot(aggregated_dates, aggregated_burned_calories, label="–°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏", marker="o", color="red")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.title(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({time_period})")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏—è")
    plt.legend()
    plt.grid(True)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    output_path = f"progress_{user_id}_{time_period}.png"
    plt.savefig(output_path)
    plt.close()

    logger.info(
        f"user {user_id} " + f"–≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω")

    return output_path

# –ü—Ä–æ–≥—Ä–µ—Å—Å
async def check_history_progress(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user_data = users.get(user_id)
    if not user_data or user_data.get('calorie_goal') == 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    # Extract the time period from the command
    if len(context.args) == 0:
        time_period = "day"
    else:
        time_period = context.args[0].lower()
        #await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ: /check_history_progress <day, week, month –∏–ª–∏ year>.")
        #return

    if time_period not in ["day", "week", "month", "year"]:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ day, week, month –∏–ª–∏ year.")
        return

    dates, water, calories, water_goal, calorie_goal, burned_calories = users.get_user_history(user_id, time_period)
    if not dates:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
        return

    logger.info(
        f"user {user_id} " + f"–∏—Å—Ç–æ—Ä–∏—è")

    graph_path = plot_progress(user_id, dates, water, calories, water_goal, calorie_goal, burned_calories, time_period)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(graph_path, "rb") as graph_file:
        await update.message.reply_photo(graph_file)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    os.remove(graph_path)
